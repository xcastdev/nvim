return {
	"folke/snacks.nvim",
	priority = 1000,
	lazy = false,
    -- stylua: ignore
	keys = {
		{ "<leader><leader>", function() Snacks.picker.smart() end, desc = "Search Files" },
		{ "<leader>sh", function() Snacks.picker.help() end, desc = "[S]earch [H]elp" },
		{ "<leader>sk", function() Snacks.picker.keymaps() end, desc = "[S]earch [K]eymaps" },
		{ "<leader>sw", function() Snacks.picker.grep_word() end, desc = "[S]earch Current [W]ord" },
		{ "<leader>sg", function() Snacks.picker.grep() end, desc = "[S]earch By [G]rep" },
		{ "<leader>sd", function() Snacks.picker.diagnostics() end, desc = "[S]earch [D]iagnostics" },
		{ "<leader>s.", function() Snacks.picker.resume() end, desc = '[S]earch [.] Resume' },
		{ "<leader>sr", function() Snacks.picker.recent() end, desc = '[S]earch [R]ecent' },
		{ "<leader>sb", function() Snacks.picker.buffers() end, desc = "[S]earch Existing [B]uffers" },
		{ "<leader>sB", function() Snacks.picker.grep_buffers() end, desc = "[S]earch In Open [B]uffers" },
		{ "<leader>sn", function() Snacks.picker.files({ cwd = vim.fn.stdpath("config") }) end, desc = "[S]earch [N]eovim Files"},
		{ "<leader>sp", function() Snacks.picker.projects({recent = false, dev = { "~/Projects" }, patterns = { ".git", "_darcs", ".hg", ".bzr", ".svn", "package.json", "Makefile", ".venv/", "go.mod" }}) end, desc = "[S]earch [P]rojects"},
		{ "<leader>s/", function() Snacks.picker.lines() end, desc = "[S]earch [/] Current Buffer" },
		{ "<leader>sc", function() Snacks.picker.colorschemes() end, desc = "[S]earch [C]olorschemes" },
		{ '<leader>s"', function() Snacks.picker.registers() end, desc = "[S]earch [\"] Registers" },
		{ '<leader>ss', function() Snacks.picker.search_history() end, desc = "[S]earch [S]earch History" },
		{ "<leader>sa", function() Snacks.picker.autocmds() end, desc = "[S]earch [A]utocmds" },
		{ "<leader>sc", function() Snacks.picker.command_history() end, desc = "[S]earch [C]ommand History" },
		{ "<leader>sC", function() Snacks.picker.commands() end, desc = "[S]earch [C]ommands" },
		{ "<leader>sh", function() Snacks.picker.highlights() end, desc = "[S]earch [H]ighlights" },
		{ "<leader>si", function() Snacks.picker.icons() end, desc = "[S]earch [I]cons" },
		{ "<leader>sj", function() Snacks.picker.jumps() end, desc = "[S]earch [J]umps" },
		{ "<leader>sm", function() Snacks.picker.marks() end, desc = "[S]earch [M]arks" },
		{ "<leader>sq", function() Snacks.picker.qflist() end, desc = "[S]earch [Q]uickfix List" },
		{ "<leader>su", function() Snacks.picker.undo() end, desc = "[S]earch [U]ndo History" },
		{ "<leader>sld", function() Snacks.picker.lsp_definitions() end, desc = "[S]earch [L]SP [D]efinition" },
		{ "<leader>slD", function() Snacks.picker.lsp_declarations() end, desc = "[S]earch [L]SP [D]eclaration" },
		{ "<leader>slr", function() Snacks.picker.lsp_references() end, nowait = true, desc = "[S]earch [L]SP [R]eferences" },
		{ "<leader>sli", function() Snacks.picker.lsp_implementations() end, desc = "[S]earch [L]SP [I]mplementation" },
		{ "<leader>slt", function() Snacks.picker.lsp_type_definitions() end, desc = "[S]earch [L]SP [T]ype Definition" },
		{ "<leader>sls", function() Snacks.picker.lsp_symbols() end, desc = "[S]earch [L]SP [S]ymbols" },
		{ "<leader>slS", function() Snacks.picker.lsp_workspace_symbols() end, desc = "[S]earch [L]SP Workspace [S]ymbols" },
	},
	opts = {
		picker = { enabled = true },
	},
}
